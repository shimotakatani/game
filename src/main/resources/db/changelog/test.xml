<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">

    <changeSet id="201803151948" author="nponosov">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">select count(1) from information_schema.tables
                        where table_schema='public' and table_name = 'customer'
            </sqlCheck>
        </preConditions>
        <comment>Добавляем таблицу customer</comment>
        <sql>
            CREATE TABLE IF NOT EXISTS "public"."customer" (
                id BIGINT CONSTRAINT customer_id PRIMARY KEY,
                firstname TEXT,
                lastname TEXT
            );
        </sql>
    </changeSet>

    <changeSet id="201803152040" author="nponosov">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">select count(1) from information_schema.tables
                where table_schema='public' and table_name = 'rabbit'
            </sqlCheck>
        </preConditions>
        <comment>Добавляем таблицу rabbit</comment>
        <sql>
            CREATE TABLE IF NOT EXISTS "public"."rabbit" (
            id BIGINT CONSTRAINT rabbit_id PRIMARY KEY,
            eated_grass BIGINT default 0,
            x INTEGER,
            y INTEGER,
            direction INTEGER,
            clientId BIGINT NOT NULL,
            name TEXT
            );
        </sql>
    </changeSet>

    <changeSet id="201803161843" author="nponosov">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">select count(1) from information_schema.tables
                where table_schema='public' and table_name = 'map'
            </sqlCheck>
        </preConditions>
        <comment>Добавляем таблицу map</comment>
        <sql>
            CREATE TABLE IF NOT EXISTS "public"."map" (
            id BIGINT CONSTRAINT map_id PRIMARY KEY,
            capacity BIGINT default 0
            );
        </sql>
    </changeSet>

    <changeSet id="201803161936" author="nponosov">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">select count(1) from information_schema.tables
                where table_schema='public' and table_name = 'map_cell'
            </sqlCheck>
        </preConditions>
        <comment>Добавляем таблицу map_cell</comment>
        <sql>
            CREATE TABLE IF NOT EXISTS "public"."map_cell" (
            id BIGINT CONSTRAINT map_cell_id PRIMARY KEY,
            capacity INTEGER default 0,
            ground INTEGER default 0,
            eated_at_time BIGINT default 0,
            x INTEGER,
            y INTEGER,
            map_id BIGINT NOT NULL
            );
        </sql>
    </changeSet>

    <changeSet id="201803162008" author="nponosov">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">select count(1) from information_schema.tables
                where table_schema='public' and table_name = 'game'
            </sqlCheck>
        </preConditions>
        <comment>Добавляем таблицу game</comment>
        <sql>
            CREATE TABLE IF NOT EXISTS "public"."game" (
            id BIGINT CONSTRAINT game_id PRIMARY KEY,
            tacts_from_start BIGINT default 0
            );
        </sql>
    </changeSet>

    <changeSet id="201807261811" author="nponosov">
        <preConditions onFail="MARK_RAN">
            <and>
                <sqlCheck expectedResult="1">select count(1) from information_schema.tables
                    where table_schema='public' and table_name = 'map_cell'
                </sqlCheck>
                <sqlCheck expectedResult="0">select count(1) from information_schema.columns
                    where table_schema='public' and table_name = 'map_cell' and column_name = 'plant'
                </sqlCheck>
            </and>
        </preConditions>
        <comment>Добавляем поле plant в таблицу map_cell</comment>
        <sql>
            ALTER TABLE IF EXISTS "public"."map_cell"
            ADD COLUMN plant INTEGER default 0;
        </sql>
    </changeSet>

    <changeSet id="201807261810" author="nponosov">
        <preConditions onFail="MARK_RAN">
            <and>
                <sqlCheck expectedResult="1">select count(1) from information_schema.tables
                    where table_schema='public' and table_name = 'rabbit'
                </sqlCheck>
                <sqlCheck expectedResult="0">select count(1) from information_schema.columns
                    where table_schema='public' and table_name = 'rabbit' and column_name = 'tacticid'
                </sqlCheck>
            </and>
        </preConditions>
        <comment>Добавляем поле tacticId в таблицу rabbit</comment>
        <sql>
            ALTER TABLE IF EXISTS "public"."rabbit"
            ADD COLUMN tacticid INTEGER default 0;
        </sql>
    </changeSet>

    <changeSet id="201808171732" author="nponosov">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">select count(1) from information_schema.tables
                where table_schema='public' and table_name = 'users'
            </sqlCheck>
        </preConditions>
        <comment>Добавляем таблицу users</comment>
        <sql>
            CREATE TABLE IF NOT EXISTS "public"."users" (
            id BIGINT CONSTRAINT user_id PRIMARY KEY,
            username TEXT NOT NULL,
            password TEXT NOT NULL,
            rabbit_id BIGINT
            );

            COMMENT ON TABLE "public"."users" is 'Таблица пользователей';
            COMMENT ON COLUMN "public"."users"."username" is 'Имя пользователя';
            COMMENT ON COLUMN "public"."users"."password" is 'Пароль пользователя';
            COMMENT ON COLUMN "public"."users"."rabbit_id" is 'Идентификатор управляемого кролика';
        </sql>
    </changeSet>

    <changeSet id="201808171816" author="nponosov">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">select count(1) from pg_available_extensions
                where name='pgcrypto'
            </sqlCheck>
        </preConditions>
        <comment>Добавляем расширение для генерации UUID</comment>
        <sql>
            create extension pgcrypto;
        </sql>
    </changeSet>

    <changeSet id="201808171742" author="nponosov">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">select count(1) from information_schema.tables
                where table_schema='public' and table_name = 'session'
            </sqlCheck>
        </preConditions>
        <comment>Добавляем таблицу session</comment>
        <sql>
            CREATE TABLE IF NOT EXISTS "public"."session" (
            id BIGINT CONSTRAINT session_id PRIMARY KEY,
            username TEXT NOT NULL,
            token TEXT DEFAULT gen_random_uuid(),
            active_to_time BIGINT,
            create_time BIGINT
            );

            COMMENT ON TABLE "public"."session" is 'Таблица сессий';
            COMMENT ON COLUMN "public"."session"."username" is 'Имя пользователя';
            COMMENT ON COLUMN "public"."session"."token" is 'Токен сессии';
            COMMENT ON COLUMN "public"."session"."active_to_time" is 'Время до которого активна сессия';
            COMMENT ON COLUMN "public"."session"."create_time" is 'Время создания сессии';
        </sql>
    </changeSet>

    <changeSet id="201808171755" author="nponosov">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">select count(1) from information_schema.tables
                where table_schema='public' and table_name = 'history_session'
            </sqlCheck>
        </preConditions>
        <comment>Добавляем таблицу history_session</comment>
        <sql>
            CREATE TABLE IF NOT EXISTS "public"."history_session" (
            id BIGINT CONSTRAINT history_session_id PRIMARY KEY,
            username TEXT NOT NULL,
            token TEXT DEFAULT gen_random_uuid(),
            active_to_time BIGINT,
            create_time BIGINT,
            archive_time BIGINT
            );

            COMMENT ON TABLE "public"."history_session" is 'Таблица истории сессий';
            COMMENT ON COLUMN "public"."history_session"."username" is 'Имя пользователя';
            COMMENT ON COLUMN "public"."history_session"."token" is 'Токен сессии';
            COMMENT ON COLUMN "public"."history_session"."active_to_time" is 'Время до которого активна сессия';
            COMMENT ON COLUMN "public"."history_session"."create_time" is 'Время создания сессии';
            COMMENT ON COLUMN "public"."history_session"."archive_time" is 'Время архивации сессии';
        </sql>
    </changeSet>

</databaseChangeLog>